C51 COMPILER V7.10   F3XX_USB0_DESCRIPTOR                                                  06/02/1987 18:18:25 PAGE 1   


C51 COMPILER V7.10, COMPILATION OF MODULE F3XX_USB0_DESCRIPTOR
OBJECT MODULE PLACED IN F3xx_USB0_Descriptor.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\c51.exe F3xx_USB0_Descriptor.c DB OE LARGE OT(7,SPEED)

line level    source

   1          //-----------------------------------------------------------------------------
   2          // F3xx_USB0_Descriptor.c
   3          //-----------------------------------------------------------------------------
   4          // Copyright 2005 Silicon Laboratories, Inc.
   5          // http://www.silabs.com
   6          //
   7          // Program Description:
   8          //
   9          // Source file for USB firmware. Includes descriptor data.
  10          //
  11          //
  12          // How To Test:    See Readme.txt
  13          //
  14          //
  15          // FID:            3XX000031
  16          // Target:         C8051F32x/C8051F340
  17          // Tool chain:     Keil C51 7.50 / Keil EVAL C51
  18          //                 Silicon Laboratories IDE version 2.6
  19          // Command Line:   See Readme.txt
  20          // Project Name:   F3xx_MouseExample
  21          //
  22          //
  23          // Release 1.1
  24          //    -Minor code comment changes
  25          //    -16 NOV 2006
  26          // Release 1.0
  27          //    -Initial Revision (PD)
  28          //    -07 DEC 2005
  29          //
  30          //-----------------------------------------------------------------------------
  31          // Includes
  32          //-----------------------------------------------------------------------------
  33          #include <c8051f3xx.h>  // SFR declarations
  34          
  35          #include "F3xx_USB0_Register.h"
  36          #include "F3xx_USB0_InterruptServiceRoutine.h"
  37          #include "F3xx_USB0_Descriptor.h"
  38          
  39          //-----------------------------------------------------------------------------
  40          // Descriptor Declarations
  41          //-----------------------------------------------------------------------------
  42          
  43          #define LE(x)   ((((x)&0x00FF)<<8)|(((x)&0xFF00)>>8))   // convert to little endian
  44          #define PIXEL_NUM_MSB   (unsigned char)(((PIXEL_NUMBER + 1) & 0xFF00)>>8) //msb of pixel number
  45          #define PIXEL_NUM_LSB   (unsigned char) (PIXEL_NUMBER + 1) //lsb of pixel number
  46          
  47          code const device_descriptor DEVICEDESC =
  48          {
  49             18,                                 // bLength
  50             0x01,                               // bDescriptorType
  51             LE(0x0200),                         // bcdUSB
  52             0x00,                               // bDeviceClass
  53             0x00,                               // bDeviceSubClass
  54             0x00,                               // bDeviceProtocol
  55             EP0_PACKET_SIZE,                    // bMaxPacketSize0
C51 COMPILER V7.10   F3XX_USB0_DESCRIPTOR                                                  06/02/1987 18:18:25 PAGE 2   

  56             LE(0x192F),                         // idVendor
  57             LE(0x0000),                         // idProduct
  58             LE(0x0000),                         // bcdDevice
  59             0x01,                               // iManufacturer
  60             0x02,                               // iProduct
  61             0x00,                               // iSerialNumber
  62             0x01                                // bNumConfigurations
  63          }; //end of DEVICEDESC
  64          
  65          // From "USB Device Class Definition for Human Interface Devices (HID)".
  66          // Section 7.1:
  67          // "When a Get_Descriptor(Configuration) request is issued,
  68          // it returns the Configuration descriptor, all Interface descriptors,
  69          // all Endpoint descriptors, and the HID descriptor for each interface."
  70          code const hid_configuration_descriptor HIDCONFIGDESC =
  71          {
  72          
  73          { // configuration_descriptor hid_configuration_descriptor
  74             0x09,                               // Length
  75             0x02,                               // Type
  76             LE(sizeof(hid_configuration_descriptor)),  // wTotalLength
  77             0x01,                               // NumInterfaces
  78             0x01,                               // bConfigurationValue
  79             0x00,                               // iConfiguration
  80             0x80,                               // bmAttributes
  81             0x20                                // MaxPower (in 2mA units)
  82          },
  83          
  84          { // interface_descriptor hid_interface_descriptor
  85             0x09,                               // bLength
  86             0x04,                               // bDescriptorType
  87             0x00,                               // bInterfaceNumber
  88             0x00,                               // bAlternateSetting
  89             0x01,                               // bNumEndpoints
  90             0x03,                               // bInterfaceClass (3 = HID)
  91             0x01,                               // bInterfaceSubClass
  92             0x02,                               // bInterfaceProcotol
  93             0x00                                // iInterface
  94          },
  95          
  96          { // class_descriptor hid_descriptor
  97                  0x09,                              // bLength
  98                  0x21,                              // bDescriptorType
  99                  LE(0x0101),
 100                  0x00,                              // bCountryCode
 101                  0x01,                              // bNumDescriptors
 102                  0x22,                              // bDescriptorType
 103                  LE(sizeof(hid_report_descriptor))  // wItemLength (tot. len. of report
 104                                                 // descriptor)
 105          },
 106          
 107          // IN EP1 endpoint (mandatory for HID)
 108          { // endpoint_descriptor hid_endpoint_in_descriptor
 109             0x07,                               // bLength
 110             0x05,                               // bDescriptorType
 111             0x81,                               // bEndpointAddress
 112             0x03,                               // bmAttributes
 113             LE(EP1_PACKET_SIZE),                // wMaxPacketSize (LITTLE ENDIAN)
 114             1                                   // bInterval
 115          },
 116          
 117          // OUT EP1 endpoint (optional for HID)
C51 COMPILER V7.10   F3XX_USB0_DESCRIPTOR                                                  06/02/1987 18:18:25 PAGE 3   

 118          { // endpoint_descriptor hid_endpoint_out_descriptor
 119             0x07,                               // bLength
 120             0x05,                               // bDescriptorType
 121             0x01,                               // bEndpointAddress
 122             0x03,                               // bmAttributes
 123             LE(EP1_PACKET_SIZE),                // wMaxPacketSize (LITTLE ENDIAN)
 124             1                                  // bInterval
 125          }
 126          
 127          };
 128          
 129          
 130          code const hid_report_descriptor HIDREPORTDESC =
 131          {
 132              0x05, 0x01,                        // Usage Page (Generic Desktop)
 133              0x09, 0x02,                        // Usage (Mouse)
 134              0xA1, 0x01,                        // Collection (Application)
 135                  0x85, 0x01,                                        //   REPORT ID (0x01)
 136              0x09, 0x01,                        //   Usage (Pointer)
 137              0xA1, 0x00,                        //   Collection (Physical)
 138              0x05, 0x09,                        //     Usage Page (Buttons)
 139              0x19, 0x01,                        //     Usage Minimum (1)
 140              0x29, 0x03,                        //     Usage Maximum (3)
 141              0x15, 0x00,                        //     Logical Minimum (0)
 142              0x25, 0x01,                        //     Logical Maximum (1)
 143              0x95, 0x03,                        //     Report Count (1)
 144              0x75, 0x01,                        //     Report Size (1)
 145              0x81, 0x02,                        //     Input (Data, Variable, Absolute)
 146              0x95, 0x01,                        //     Report Count (1)
 147              0x75, 0x05,                        //     Report Size (5)
 148              0x81, 0x01,                        //     Input (Constant) for padding
 149              0x05, 0x01,                        //     Usage Page (Generic Desktop)
 150              0x09, 0x30,                        //     Usage (X)
 151              0x09, 0x31,                        //     Usage (Y)
 152              0x09, 0x38,                            //     USAGE (Wheel)
 153              0x15, 0x81,                        //     Logical Minimum (-127)
 154              0x25, 0x7F,                        //     Logical Maximum (127)
 155              0x75, 0x08,                        //     Report Size (8)
 156              0x95, 0x03,                        //     Report Count (3)
 157              0x81, 0x06,                        //     Input (Data, Variable, Relative)
 158          
 159                  0x06, 0x00, 0xff,              //     USAGE_PAGE (Vendor Defined Page 1)
 160              0x09, 0x01,                    //     USAGE (Vendor Usage 1)
 161              0x15, 0x80,                    //     LOGICAL_MINIMUM (-128)
 162              0x25, 0x7f,                    //     LOGICAL_MAXIMUM (127)
 163              0x75, 0x08,                    //     REPORT_SIZE (8)
 164                  0x95, 0x03,                    //     REPORT_COUNT (3)
 165              0xb1, 0x02,                    //     FEATURE (Data,Var,Abs)
 166          
 167              0xC0,                              //   End Collection (Physical)
 168              0xC0,                               // End Collection (Application)
 169          
 170                  0x06, 0x00, 0xff,              // USAGE_PAGE (Vendor Defined Page 1)
 171              0x09, 0x01,                    // USAGE (Vendor Usage 1)
 172                  0xa1, 0x01,                    // COLLECTION (Application)
 173                  0x85, 0x02,                                //   REPORT ID (0x02)
 174                  0xa1, 0x00,                    //   COLLECTION (Physical)
 175                  0x09, 0x02,                    //   USAGE (Vendor Usage 1)      
 176              0x15, 0x80,                    //   LOGICAL_MINIMUM (-128)
 177              0x25, 0x7f,                    //   LOGICAL_MAXIMUM (127)
 178              0x75, 0x08,                    //   REPORT_SIZE (8)
 179                  0x96, PIXEL_NUM_LSB, PIXEL_NUM_MSB,     //   REPORT_COUNT (451)
C51 COMPILER V7.10   F3XX_USB0_DESCRIPTOR                                                  06/02/1987 18:18:25 PAGE 4   

 180              0xb1, 0x02,                    //   FEATURE (Data,Var,Abs)
 181                  0xc0,                          //       END_COLLECTION
 182              0xc0,                          // END_COLLECTION
 183          
 184                  0x05, 0x01,                     // USAGE_PAGE (Generic Desktop)
 185              0x09, 0x06,                         // USAGE (Keyboard)
 186              0xa1, 0x01,                         // COLLECTION (Application)
 187              0x85, 0x03,                         //   REPORT_ID (3)
 188              0x05, 0x07,                         //   USAGE_PAGE (Keyboard)
 189              0x19, 0xe0,                         //   USAGE_MINIMUM (Keyboard LeftControl)
 190              0x29, 0xe7,                         //   USAGE_MAXIMUM (Keyboard Right GUI)
 191              0x15, 0x00,                         //   LOGICAL_MINIMUM (0)
 192              0x25, 0x01,                         //   LOGICAL_MAXIMUM (1)
 193              0x75, 0x01,                         //   REPORT_SIZE (1)
 194              
 195                  0x95, 0x08,                     //   REPORT_COUNT (8)
 196              0x81, 0x02,                         //   INPUT (Data,Var,Abs)
 197              0x95, 0x01,                         //   REPORT_COUNT (1)
 198              0x75, 0x08,                         //   REPORT_SIZE (8)
 199              0x81, 0x01,                         //   INPUT (Cnst,Ary,Abs)
 200              0x95, 0x05,                         //   REPORT_COUNT (5)
 201              0x75, 0x01,                         //   REPORT_SIZE (1)
 202              0x05, 0x08,                         //   USAGE_PAGE (LEDs)
 203              0x19, 0x01,                         //   USAGE_MINIMUM (Num Lock)
 204              0x29, 0x05,                         //   USAGE_MAXIMUM (Kana)
 205              
 206                  0x91, 0x02,                     //   OUTPUT (Data,Var,Abs)
 207              0x95, 0x01,                         //   REPORT_COUNT (1)
 208              0x75, 0x03,                         //   REPORT_SIZE (3)
 209              0x91, 0x01,                         //   OUTPUT (Cnst,Ary,Abs)
 210              0x95, 0x06,                         //   REPORT_COUNT (6)
 211              0x75, 0x08,                         //   REPORT_SIZE (8)
 212              0x15, 0x00,                         //   LOGICAL_MINIMUM (0)
 213              0x25, 0x65,                         //   LOGICAL_MAXIMUM (101)
 214              0x05, 0x07,                         //   USAGE_PAGE (Keyboard)
 215              0x19, 0x00,                         //   USAGE_MINIMUM (Reserved (no event indicated))
 216              
 217                  0x29, 0x65,                     //   USAGE_MAXIMUM (Keyboard Application)
 218              0x81, 0x00,                         //   INPUT (Data,Ary,Abs)
 219              0xC0,                                                       // END_COLLECTION
 220          
 221                          0x05, 0x01,                        // Usage Page (Generic Desktop)
 222              0x09, 0x04,                        // Usage (Joystick)
 223              0xA1, 0x01,                        // Collection (Application)
 224                  0x85, 0x04,                                        //   REPORT ID (0x04)
 225                  
 226              0x09, 0x01,                        //   Usage (Pointer)
 227              0xA1, 0x00,                        //   Collection (Physical)
 228              0x05, 0x01,                        //     Usage Page (Generic Desktop)
 229              0x09, 0x30,                        //     Usage (X)
 230              0x09, 0x31,                        //     Usage (Y)
 231              0x15, 0x00,                            //     Logical Minimum (0)
 232              0x26, 0xFF, 0x00,                  //     Logical Maximum (255)
 233              0x35, 0x00,                            //     Physical Minimum (0)
 234              0x46, 0xFF, 0x00,                  //     Physical Maximum (255)
 235              0x65, 0x00,                                            //     Unit (None)
 236              0x75, 0x08,                        //     Report Size (8)
 237              0x95, 0x02,                        //     Report Count (2)
 238              0x81, 0x02,                        //     Input (Data, Variable, Absolute)
 239              
 240              0x05, 0x09,                        //     Usage Page (Button)
 241              0x15, 0x00,                        //     Logical Minimum (0)
C51 COMPILER V7.10   F3XX_USB0_DESCRIPTOR                                                  06/02/1987 18:18:25 PAGE 5   

 242              0x25, 0x01,                        //     Logical Maximum (1)
 243              0x19, 0x01,                        //     Usage Minimum (1)
 244              0x29, 0x08,                        //     Usage Maximum (8)
 245              0x95, 0x08,                        //     Report Count (8)
 246              0x75, 0x01,                        //     Report Size (1)
 247              0x81, 0x02,                        //     Input (Data, Variable, Absolute)
 248          
 249              0xC0,                              //   End Collection (Physical)
 250              0xC0,                               // End Collection (Application)
 251          
 252          };
 253          
 254          
 255          #define STR0LEN 4
 256          
 257          code const unsigned char String0Desc [STR0LEN] =
 258          {
 259             STR0LEN, 0x03, 0x09, 0x04
 260          }; //end of String0Desc
 261          
 262          #define STR1LEN sizeof ("AVAGO TECHNOLOGIES") * 2
 263          
 264          code const unsigned char String1Desc [STR1LEN] =
 265          {
 266             STR1LEN, 0x03,
 267             'A', 0,
 268             'V', 0,
 269             'A', 0,
 270             'G', 0,
 271             'O', 0,
 272             ' ', 0,
 273             'T', 0,
 274             'E', 0,
 275             'C', 0,
 276             'H', 0,
 277             'N', 0,
 278             'O', 0,
 279             'L', 0,
 280             'O', 0,
 281             'G', 0,
 282             'I', 0,
 283             'E', 0,
 284             'S', 0
 285          }; //end of String1Desc
 286          
 287          #define STR2LEN sizeof ("AVAGO USB OFN Device") * 2
 288          
 289          code const unsigned char String2Desc [STR2LEN] =
 290          {
 291             STR2LEN, 0x03,
 292             'A', 0,
 293             'V', 0,
 294             'A', 0,
 295             'G', 0,
 296             'O', 0,
 297             ' ', 0,
 298             'U', 0,
 299             'S', 0,
 300             'B', 0,
 301             ' ', 0,
 302             'O', 0,
 303             'F', 0,
C51 COMPILER V7.10   F3XX_USB0_DESCRIPTOR                                                  06/02/1987 18:18:25 PAGE 6   

 304             'N', 0,
 305             ' ', 0,
 306             'D', 0,
 307             'e', 0,
 308             'v', 0,
 309             'i', 0,
 310             'c', 0,
 311             'e', 0,
 312          }; //end of String2Desc
 313          
 314          unsigned char* const STRINGDESCTABLE [] =
 315          {
 316             String0Desc,
 317             String1Desc,
 318             String2Desc
 319          };


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   ----    ----
   CONSTANT SIZE    =    357    ----
   XDATA SIZE       =      9    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
